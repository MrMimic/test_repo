from flask import Flask, render_template, request
import json
import plotly
from plotly import graph_objs as go
import numpy as np
import pandas as pd

app = Flask(__name__)


def get_about():
    about = "I WAS GENERATED BY PYTHON INTO HTML"
    return about


# def compute_query_df():
#     " Method to update the DF "
#     print(query)
#     # Get K closest for each
#     closest_sentences_df = query_matching.get_k_closest_sentences(
#         query=query,
#         all_sentences=all_db_sentences_original,
#         embedding_model=embedding_model,
#         minimal_number_of_sentences=params.query.
#         minimum_sentences_kept,
#         similarity_threshold=params.query.
#         cosine_similarity_threshold)
#     # Clusterise them
#     closest_sentences_df = clusterise_sentences.perform_kmean(
#         k_closest_sentences_df=closest_sentences_df,
#         number_of_clusters=params.query.number_of_clusters,
#         k_min=params.query.k_min,
#         k_max=params.query.k_max,
#         min_feature_per_cluster=params.query.
#         min_feature_per_cluster)

def create_plot(value):
    " Method to plot the DF "
    try:
        N = int(value)
    except ValueError:
        N = 40
    x = np.random.uniform(low=0, high=10, size=(N, ))
    y = np.random.uniform(low=0, high=10, size=(N, ))
    df = pd.DataFrame({'x': x, 'y': y})

    data = [
        go.Scatter(
            x=df['x'],
            y=df['y'],
            mode='markers')
    ]

    layout = go.Layout(
        yaxis={'title': 'X'},
        xaxis={'title': 'Y'},
        margin={'l': 50, 'r': 50, 'b': 50, 't': 20, 'pad': 0}
    )

    figure = dict(data=data, layout=layout)
    graphJSON = json.dumps(figure, cls=plotly.utils.PlotlyJSONEncoder)

    return graphJSON


@app.route('/', methods=['GET', 'POST'])
def process_user_query():
    # Get params
    print(list(request.form.keys()))
    query = request.form['user_input']
    n_sentences = request.form['n_sentence']
    sim_threshold = request.form['sim_threshold']
    number_cluster = request.form['number_cluster']
    k_closest_senteces = request.form['k_closest_senteces']
    feature_per_cluster = request.form['feature_per_cluster']

    # Compute sentences DF
    # closest_sentences_df = compute_query_df(args)

    # Create the plot
    plot = create_plot(query)

    # Get other pages
    about = get_about()

    # Return render
    index_template = render_template('index.html', plot=plot, about=about)

    return index_template


# @app.route('/')
# def index():
#     text = 40
#     bar = create_plot(text)
#     return render_template('index.html', plot=bar)

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0')
